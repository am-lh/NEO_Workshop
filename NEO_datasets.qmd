---
title: "NEO Workshop"
author: "Amélie Lehuen"
date: "`r format(Sys.time(), '%B %Y')`"
description: "add info on script"
toc: true # table of content at beginning of document
number-sections: true
highlight-style: pygments
format: 
  html: 
    self-contained: true
    code-fold: false
    html-math-method: katex # displays equations
  docx: 
    reference-doc: customreference_nonb.docx

bibliography: references.bib

editor: visual
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
  cache: false #create cache of results of chunks
---

# Introduction

The aim of the workshop is to...

## Script preparation

```{r}
#| label: load-packages
#| code-summary: "Packages"
#| include: false

library(knitr)
library(readxl) ; library(openxlsx)
library(beepr); library(clipr)
library(tidyverse); library(data.table)
library(broom); library(purrr) # tidy,glance,augment
library(lubridate)

# SIG
library(sf); library(sfheaders)
library(rnaturalearth) # library(raster)
library(tmap)
library(tmaptools) # tmap_mode; for static and interactive maps

# Graphics packages
library(scales); library(grafify)
library(RColorBrewer)
library(ggpubr)

```

```{r}
#| label: workenvir
#| echo: true

rm(list=ls())

wdsource <- "Data/"
wdres <- "Results/"
wdmat <- "Matrices/"
wdgraph <- "Plots/"

```

```{r}
#| label: graphchart
theme_set(theme_bw(base_size = 16)) # theme_gray() theme_bw() theme_light() theme_dark()
# My_Theme <- theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16))

pal_clb <- function(x) {graf_col_palette(palette = "muted")(x)}; # show_col(pal_clb(4))
colbdd <- pal_clb(4)
colBin<-c(pal_clb(6)[1],pal_clb(6)[2]); colMisc<-pal_clb(6)[6]# show_col(colBin)
Scalc_bin<- function() {scale_colour_manual(values=colBin)}
Scalc_lon<- function(x) {scale_colour_manual(values=pal_clb(x))}
# Scale_brew <- function() {scale_colour_brewer(palette="Spectral",aesthetics=c("colour","fill"))}
```

```{r}
#| label: functmade

loadRData <- function(fileName){
#loads an RData file, and returns it
    load(fileName)
    mget(ls()[ls() != "fileName"])
}
```

# Load of Data

## Basic variables

```{r}
#| label: basicvar


```

## Output binder and data

```{r}
#| label: outfiles
binderout <- sprintf("%sNEO_wshp.xlsx",wdres)
rdataout  <- sprintf("%sNEO_wshp.RData",wdres)
# if exists
# load(rdataout)

```

## BENTHOBS

Data are available on https://data.benthobs.fr/. There are different files:

-   **granulometry** TSV file with granulometry data.

-   **hydrology** TSV file with hydrology data.

-   **macrofauna** TSV file with macrofauna data.

-   **organicmatter** TSV file with organic matter data

```{r}
#| label: benthos_load

# benthobs_site <- "https://data.benthobs.fr/files/latest/all_sites/"
# download.file(paste0(benthobs_site,"granulometry.tsv"),
#                         destfile=sprintf("%sBENTHOBS/granulometry.tsv",wdsource))
# download.file(paste0(benthobs_site,"hydrology.tsv"),
#                         destfile=sprintf("%sBENTHOBS/hydrology.tsv",wdsource))
# download.file(paste0(benthobs_site,"macrofauna.tsv"),
#                         destfile=sprintf("%sBENTHOBS/macrofauna.tsv",wdsource))
# download.file(paste0(benthobs_site,"organicmatter.tsv"),
#                         destfile=sprintf("%sBENTHOBS/organicmatter.tsv",wdsource))
name_base <- "BENTHOBS"
name_file<-c("granulometry","hydrology","macrofauna","organicmatter")
name_df<-c("bo_granu","bo_hydro","bo_macro","bo_orga")

bo_set_raw <- lapply(sprintf("%sBENTHOBS/%s.tsv",
          wdsource,name_file),
          read_tsv)

bo_set <- bo_set_raw %>%
  setNames(name_df) %>% 
  Map(cbind, ., bdd_table=names(.)) %>% 
  lapply(.  %>%
    as.data.frame() %>% 
    mutate(bdd_base = name_base) %>% 
    rename(sampling_date=`Sampling date`,
           station=Station,
           longitude=Longitude,
           latitude=Latitude) %>% 
    mutate(across(where(is.logical),as.character)) %>% 
      relocate(bdd_base,bdd_table))

bo_setvar <- Reduce(intersect, lapply(bo_set, names))

bo_sf <- lapply(bo_set, st_as_sf, 
                coords=c("longitude","latitude"),
                crs=4326,remove = FALSE)
bo_coord <- bo_sf %>% lapply( . %>% 
  select(c("bdd_base","bdd_table","station","longitude","latitude")) %>% 
  summarise(unique(.))) %>% 
  bind_rows() %>% 
  as.data.frame(.) %>% 
  mutate("TRUE" = TRUE) %>% 
  pivot_wider(names_from = bdd_table, values_from = "TRUE", values_fill = FALSE) %>% 
  st_as_sf()
  
```

## PHYTOBS

Data are available on https://data.phytobs.fr/. There are different files:

-   **Analyst** files containing single taxon counts.

-   **Phytobs** files containing single counts for taxon groups that are part of the SNO labelled taxon groups.

-   **combined** files aggregating the two previous files.

```{r}
#| label: phythos_load
phytobs_site <- "https://data.phytobs.fr/files/latest/all_sites/"
# download.file(paste0(phytobs_site,"Phytobs.csv"),
#                         destfile="./Data/PHYTOBS/Phytobs.csv")
# download.file(paste0(phytobs_site,"Analyst.csv"),
#                         destfile="./Data/PHYTOBS/Analyst.csv")
# download.file(paste0(phytobs_site,"combined.csv"),
#                         destfile="./Data/PHYTOBS/combined.csv")
name_base <- "PHYTOBS"
name_file<-c("Analyst","Phytobs","combined")
name_df<-c("po_analy","po_phyto","po_comb")

po_set_raw <- lapply(sprintf("%sPHYTOBS/%s.csv",
          wdsource,name_file),
          read_delim,delim=";")

po_set <- po_set_raw %>%
  setNames(name_df) %>% 
  Map(cbind, ., bdd_table=names(.)) %>% 
  lapply(.  %>%
    as.data.frame() %>% 
    mutate(bdd_base = name_base) %>% 
    rename(sampling_date=sampling_date,
           station=site,
           longitude=longitude,
           latitude=latitude) %>% 
    relocate(bdd_base,bdd_table) %>% 
    mutate(across(where(is.logical),as.character)))

po_setvar <- Reduce(intersect, lapply(po_set, names))

               
po_sf <- lapply(po_set,st_as_sf, coords=c("longitude","latitude"),
                    crs=4326,remove = FALSE)
po_coord <- po_sf %>% lapply( . %>% 
  select(c("bdd_base","bdd_table","station","longitude","latitude")) %>% 
  summarise(unique(.))) %>% 
  bind_rows() %>% 
  as.data.frame(.) %>% 
  mutate("TRUE" = TRUE) %>% 
  pivot_wider(names_from = bdd_table, values_from = "TRUE", values_fill = FALSE) %>% 
  st_as_sf()
```

## SOMLIT

Data are available on https://www.somlit.fr/demande-de-donnees/. You have to request with your mail each files available. Please refer to [@liénart2017], [@liénart2018], [@cocquempot2019] and [@lheureux2022] for detail about the dataset building and history. Parameters available are in @fig-parsom.

![](images/tableau_parametre.png){#fig-parsom}

```{r}
#| label: somlit_load
name_base <- "SOMLIT"
name_file<-c("Somlit_Extraction_ctd","Somlit_Extraction_hydro","Somlit_Extraction_piconano")
name_df<-c("sl_ctd","sl_hydro","sl_piconano")

sl_set_raw <- lapply(sprintf("%sSOMLIT/%s.csv",
          wdsource,name_file),
          read_delim,skip = 2,comment="//",delim=";")

sl_set <- sl_set_raw %>%
  setNames(name_df) %>% 
  Map(cbind, ., bdd_table=names(.)) %>% 
  lapply(.  %>%
    as.data.frame() %>% 
    setNames(sub("\\*", "", names(.))) %>% 
    mutate(bdd_base = name_base) %>% 
    rename(sampling_date=DATE,
           station=nomSite,
           longitude=gpsLong,
           latitude=gpsLat) %>% 
    mutate(across(where(is.logical),as.character)) %>% 
      relocate(bdd_base,bdd_table))

sl_setvar <- Reduce(intersect, lapply(sl_set, names))

sl_sf <- lapply(sl_set,st_as_sf, coords=c("longitude","latitude"),
                    crs=4326,remove = FALSE)
sl_coord <- sl_sf %>% lapply( . %>% 
  select(c("bdd_base","bdd_table","station","longitude","latitude")) %>% 
  summarise(unique(.))) %>% 
  bind_rows() %>% 
  as.data.frame(.) %>% 
  mutate("TRUE" = TRUE) %>% 
  pivot_wider(names_from = bdd_table, values_from = "TRUE", values_fill = FALSE) %>% 
  st_as_sf()
```

## COASTHF

Data are available on https://data.coriolis-cotier.org/fr. In the menu, the active platform toggle button is activated and the COASTHF network is selected. All available stations has been selected. Detailed information are available on https://coast-hf.fr/. The selected buoys in data are listed in @tbl-coashf

```{r}
#| label: coasthf_load
#| output: false
name_base <- "COASTHF"

cf_buoy<-as.data.frame(rbind(
               c("EXIN0003","POEM"),
               c("EXIN0004","SOLEMIO"),
               c("EXIN0002","EOL"),
               c("EXIN0001","ARCACHON B13"),
               c("6100284","Mesurho"),
               c("EXIN0006","SOLA"),
               c("6200021","Vilaine Molit"),
               c("IF000700","SMART"),
               c("6200450","Iroise Stanne"),
               c("IF000997","Iroise Stanne TEST"),
               c("6200310","Smile LucSurMer"),
               c("SCENES","SCENES"),
               c("6200443","Carnot"),
               c("EXIN0005","ASTAN"))
               )
names(cf_buoy) <- c("Code","Name")

cf_set_raw <- lapply(sprintf("%s/COASTHF/mooring-buoys-time-series-%s.csv",
          wdsource,cf_buoy[,1]),
          read_csv)

cf_set <- cf_set_raw %>% 
  setNames(cf_buoy[,1]) %>% 
  Map(cbind, ., bdd_table=cf_buoy[,2]) %>%
  lapply(.  %>% 
    as.data.frame() %>% 
    mutate(PLATFORM = as.character(PLATFORM)) %>% 
    mutate(bdd_base = name_base) %>% 
    rename(sampling_date=`DATE (yyyy-mm-ddThh:mi:ssZ)`,
           station=PLATFORM,
           longitude=`LONGITUDE (degree_east)`,
           latitude=`LATITUDE (degree_north)`) %>% 
    mutate(across(where(is.logical),as.character))  %>% 
    relocate(bdd_base,bdd_table))

cf_setvar <- Reduce(intersect, lapply(cf_set, names))

cf_sf <- lapply(cf_set,st_as_sf, coords=c("longitude","latitude"),
                    crs=4326,remove = FALSE)
cf_coord <- cf_sf %>% lapply( . %>% 
  select(c("bdd_base","bdd_table","station","longitude","latitude")) %>% 
  summarise(unique(.))) %>% 
  bind_rows()

```

```{r}
#| label: tbl-coasthf
#| include: true
#| fig-cap: "List of buoys"

kable(cf_buoy)

```

# Global data sets description

All data treatment has been conducted with `r R.version.string` <!--# except for MARS3D pre-treatment on Matlab 2019a -->. Significance levels are tagged for p \< .0001 with "\*\*\*\*", p \< .001 with "\*\*\*", p \< .01 with "\*\*", p \< .05 with "\*".

## Map of sites

```{r}
#| label: prefig-map
#| eval: false
#| include: true
#| fig-cap: "Maps of data sets locations"

# base of bounding boxes
boxMP<-c(xmin=-0.1, ymin=49.3, xmax=0.45, ymax=49.65)
boxchannel<-c(xmin=-2.5, ymin=49.0, xmax=1.5, ymax=51.0)

bay <- ne_states(country = c("France","united kingdom"), 
                 returnclass = "sf") %>%
  st_crop(boxchannel)
bbbay<-bb(bay)

osm_df <- read_osm(bay, ext=1.1)

# boxestuary<-bb(boxchannel)

tm_bay<-
  tm_shape(bay) + 
    tm_fill(col="grey30") +
  tm_shape(st_as_sfc(bbbay)) + 
    tm_borders("red", lwd = 2) +
  tm_layout(bg.color = "skyblue")
```

```{r}
#| label: fig-map
#| eval: true
#| include: true
#| fig-cap: "Maps of data sets locations"

tmap_mode("view") # "plot" "view"
tm_data<-
  tm_basemap(leaflet::providers$OpenStreetMap.HOT) +
  tm_shape(bo_coord) +
    tm_dots(col=colbdd[1],size=0.1,clustering = F) +
  tm_shape(po_coord) +
    tm_dots(col=colbdd[2],size=0.1,clustering = F) +
  tm_shape(sl_coord) +
    tm_dots(col=colbdd[3],size=0.1,clustering = F) +
  tm_shape(cf_coord) +
    tm_dots(col=colbdd[4],size=0.1,clustering = F) +
  tm_layout(legend.outside = TRUE) +
  tm_minimap()
tm_data
# tmap_save(tm_data, filename = "NEO_map.html")

# tmap_mode("plot") # "plot" "view"♣
# tm_data<-
#   # tm_shape(estuary, bbox = boxestuary) + 
#   #   tm_polygons() +
#   tm_shape(osm_df) +  
#     tm_rgb() +
#   tm_scale_bar(position = c("LEFT", "BOTTOM"), width = 0.15) + #SCALE
#   tm_compass(position = c("RIGHT", "BOTTOM"), size = 3) +          #NORTH COMPASS
#   tm_layout(legend.position= c("LEFT","TOP"))
# vp <- grid::viewport(0.985, 0.995, width = 0.25, just=c("right", "top"))
# print(tm_bay, vp = vp)
# # tmap_save(tm_data,filename="../Graphiques/Estuary_map_with_inset.png",
# #           insets_tm=tm_bay, insets_vp=vp,
# #           dpi=600,
# #           height=10, units="cm")

```

## Datsets description

Main information about data sets are summed up in @tbl-desc_data

```{r}
#| label: tbl-desc_data
#| tbl-cap: "Summaries of all datatables from data sets"
#| include: true


df_set<-c(bo_set,po_set,sl_set,cf_set) 
df_setvar<-c(bo_setvar,po_setvar,sl_setvar,cf_setvar) %>%
  paste(collapse = ", ")
df_names<-names(df_set)
df_desc<-list()
for (dfi in 1:length(df_set)) {
  df<-df_set[[dfi]]
  bdd_base<-unique(df$bdd_base)
  df_name<-unique(df$bdd_table)
  obsnbtot <-count(df) %>%
    pull() %>% 
    formatC(., format="f", big.mark=",", digits=0)
  varnbtot <- ncol(df)
  yearsrange <- df %>% 
    summarise(across(sampling_date,
                     list(start=~year(min(.,na.rm=TRUE)),
                          end=~year(max(.,na.rm=TRUE))))) %>%
    unlist(., use.names=FALSE) %>%
    paste(collapse = " to ")
  nbstatmt <- df %>% 
    mutate(dfMonth=month.abb[month(sampling_date)]) %>%
    group_by(dfMonth) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    arrange(desc(nbstat)) %>% 
    mutate(cumprop = cumsum(nbstat)/sum(nbstat)) %>% 
    filter(cumprop<=0.6) %>%
    arrange(match(dfMonth, month.abb)) %>% 
    pull(dfMonth,unique(cumprop)) %>% 
    paste(collapse = ", ")
  nbstattot <- df %>% 
    summarise(n_distinct(station)) %>% 
    pull()
  nbstatyr <- df %>% 
      mutate(dfYear  = year(sampling_date)) %>%
    group_by(dfYear) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    summarise(nbstat=round(mean(nbstat),0)) %>% 
    pull()
  
  df_desc[[dfi]]<-list(bdd_base =bdd_base,
                       df_name=df_name,
                       obsnbtot=obsnbtot,
                       varnbtot=varnbtot,
                       yearsrange=yearsrange,
                       nbstatmt=nbstatmt,
                       nbstattot=nbstattot,
                       nbstatyr=nbstatyr)
}

# df_desc_tb <- rbindlist(df_desc, idcol = TRUE)
bind_rows(df_desc)  %>%
  kable()

```

### Benthobs

```{r}
#| label: benth_data

df_set<-bo_set
df_setvar<-bo_setvar %>%
  paste(collapse = ", ")
df_names<-names(df_set)
df_desc<-list()
for (dfi in 1:length(df_set)) { # dfi=2
  df<-df_set[[dfi]]
  bdd_base<-unique(df$bdd_base)
  df_name<-unique(df$bdd_table)
  obsnbtot <-count(df) %>%
    pull() %>% 
    formatC(., format="f", big.mark=",", digits=0)
  varnbtot <- ncol(df)
    summarise(across(sampling_date,
                     list(start=~year(min(.,na.rm=TRUE)),
                          end=~year(max(.,na.rm=TRUE))))) %>%
    unlist(., use.names=FALSE) %>%
    paste(collapse = " to ")
  nbstatmt <- df %>% 
    mutate(dfMonth=month.abb[month(sampling_date)]) %>%
    group_by(dfMonth) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    arrange(desc(nbstat)) %>% 
    mutate(cumprop = cumsum(nbstat)/sum(nbstat)) %>% 
    filter(cumprop<=0.6) %>%
    arrange(match(dfMonth, month.abb)) %>% 
    pull(dfMonth,unique(cumprop)) %>% 
    paste(collapse = ", ")
  nbstattot <- df %>% 
    summarise(n_distinct(station)) %>% 
    pull()
  nbstatyr <- df %>% 
      mutate(dfYear  = year(sampling_date)) %>%
    group_by(dfYear) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    summarise(nbstat=round(mean(nbstat),0)) %>% 
    pull()
  
  df_desc[[dfi]]<-list(obsnbtot=obsnbtot,
                       varnbtot=varnbtot,
                       yearsrange=yearsrange,
                       nbstatmt=nbstatmt,
                       nbstattot=nbstattot,
                       nbstatyr=nbstatyr)
}
```

The BENTHOBS data set count `r length(df_set)` tables that has the common variables `r df_setvar`.

-   **`r df_names[1]`** (n= `r df_desc[[1]]$obsnbtot`) contains `r df_desc[[1]]$varnbtot` variables. Period covered is from `r df_desc[[1]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[1]]$nbstatmt`, on `r df_desc[[1]]$nbstattot` different stations, with a mean of `r df_desc[[1]]$nbstatyr` per year.

-   **`r df_names[2]`** (n= `r df_desc[[2]]$obsnbtot`) contains `r df_desc[[2]]$varnbtot` variables. Period covered is from `r df_desc[[2]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[2]]$nbstatmt`, on `r df_desc[[2]]$nbstattot` different stations, with a mean of `r df_desc[[2]]$nbstatyr` per year.

-   **`r df_names[3]`** (n= `r df_desc[[3]]$obsnbtot`) contains `r df_desc[[3]]$varnbtot` variables. Period covered is from `r df_desc[[3]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[3]]$nbstatmt`, on `r df_desc[[3]]$nbstattot` different stations, with a mean of `r df_desc[[3]]$nbstatyr` per year.

-   **`r df_names[4]`** (n= `r df_desc[[4]]$obsnbtot`) contains `r df_desc[[4]]$varnbtot` variables. Period covered is from `r df_desc[[4]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[4]]$nbstatmt`, on `r df_desc[[4]]$nbstattot` different stations, with a mean of `r df_desc[[4]]$nbstatyr` per year.

### Phytobs

```{r}
#| label: phyt_data

df_set<-po_set
df_setvar<-po_setvar %>%
  paste(collapse = ", ")
df_names<-names(df_set)
df_desc<-list()
for (dfi in 1:length(df_set)) {
  df<-df_set[[dfi]]
  bdd_base<-unique(df$bdd_base)
  df_name<-unique(df$bdd_table)
  obsnbtot <-count(df) %>%
    pull() %>% 
    formatC(., format="f", big.mark=",", digits=0)
  varnbtot <- ncol(df)
    summarise(across(sampling_date,
                     list(start=~year(min(.,na.rm=TRUE)),
                          end=~year(max(.,na.rm=TRUE))))) %>%
    unlist(., use.names=FALSE) %>%
    paste(collapse = " to ")
  nbstatmt <- df %>% 
    mutate(dfMonth=month.abb[month(sampling_date)]) %>%
    group_by(dfMonth) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    arrange(desc(nbstat)) %>% 
    mutate(cumprop = cumsum(nbstat)/sum(nbstat)) %>% 
    filter(cumprop<=0.6) %>%
    arrange(match(dfMonth, month.abb)) %>% 
    pull(dfMonth,unique(cumprop)) %>% 
    paste(collapse = ", ")
  nbstattot <- df %>% 
    summarise(n_distinct(station)) %>% 
    pull()
  nbstatyr <- df %>% 
      mutate(dfYear  = year(sampling_date)) %>%
    group_by(dfYear) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    summarise(nbstat=round(mean(nbstat),0)) %>% 
    pull()
  
  df_desc[[dfi]]<-list(obsnbtot=obsnbtot,
                       varnbtot=varnbtot,
                       yearsrange=yearsrange,
                       nbstatmt=nbstatmt,
                       nbstattot=nbstattot,
                       nbstatyr=nbstatyr)
}
```

The PHYTOBS data set count `r length(df_set)` tables that has the common variables `r df_setvar`.

-   **`r df_names[1]`** (n= `r df_desc[[1]]$obsnbtot`) contains `r df_desc[[1]]$varnbtot` variables. Period covered is from `r df_desc[[1]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[1]]$nbstatmt`, on `r df_desc[[1]]$nbstattot` different stations, with a mean of `r df_desc[[1]]$nbstatyr` per year.

-   **`r df_names[2]`** (n= `r df_desc[[2]]$obsnbtot`) contains `r df_desc[[2]]$varnbtot` variables. Period covered is from `r df_desc[[2]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[2]]$nbstatmt`, on `r df_desc[[2]]$nbstattot` different stations, with a mean of `r df_desc[[2]]$nbstatyr` per year.

-   **`r df_names[3]`** (n= `r df_desc[[3]]$obsnbtot`) contains `r df_desc[[3]]$varnbtot` variables. Period covered is from `r df_desc[[3]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[3]]$nbstatmt`, on `r df_desc[[3]]$nbstattot` different stations, with a mean of `r df_desc[[3]]$nbstatyr` per year.

### Somlit

```{r}
#| label: soml_data

df_set<-sl_set
df_setvar<-sl_setvar %>%
  paste(collapse = ", ")
df_names<-names(df_set)
df_desc<-list()
for (dfi in 1:length(df_set)) {
  df<-df_set[[dfi]]
  bdd_base<-unique(df$bdd_base)
  df_name<-unique(df$bdd_table)
  obsnbtot <-count(df) %>%
    pull() %>% 
    formatC(., format="f", big.mark=",", digits=0)
  varnbtot <- ncol(df)
    summarise(across(sampling_date,
                     list(start=~year(min(.,na.rm=TRUE)),
                          end=~year(max(.,na.rm=TRUE))))) %>%
    unlist(., use.names=FALSE) %>%
    paste(collapse = " to ")
  nbstatmt <- df %>% 
    mutate(dfMonth=month.abb[month(sampling_date)]) %>%
    group_by(dfMonth) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    arrange(desc(nbstat)) %>% 
    mutate(cumprop = cumsum(nbstat)/sum(nbstat)) %>% 
    filter(cumprop<=0.6) %>%
    arrange(match(dfMonth, month.abb)) %>% 
    pull(dfMonth,unique(cumprop)) %>% 
    paste(collapse = ", ")
  nbstattot <- df %>% 
    summarise(n_distinct(station)) %>% 
    pull()
  nbstatyr <- df %>% 
      mutate(dfYear  = year(sampling_date)) %>%
    group_by(dfYear) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    summarise(nbstat=round(mean(nbstat),0)) %>% 
    pull()
  
  df_desc[[dfi]]<-list(obsnbtot=obsnbtot,
                       varnbtot=varnbtot,
                       yearsrange=yearsrange,
                       nbstatmt=nbstatmt,
                       nbstattot=nbstattot,
                       nbstatyr=nbstatyr)
}
```

The SOMLIT data set count `r length(df_set)` tables that has the common variables `r df_setvar`.

-   **`r df_names[1]`** (n= `r df_desc[[1]]$obsnbtot`) contains `r df_desc[[1]]$varnbtot` variables. Period covered is from `r df_desc[[1]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[1]]$nbstatmt`, on `r df_desc[[1]]$nbstattot` different stations, with a mean of `r df_desc[[1]]$nbstatyr` per year.

-   **`r df_names[2]`** (n= `r df_desc[[2]]$obsnbtot`) contains `r df_desc[[2]]$varnbtot` variables. Period covered is from `r df_desc[[2]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[2]]$nbstatmt`, on `r df_desc[[2]]$nbstattot` different stations, with a mean of `r df_desc[[2]]$nbstatyr` per year.

-   **`r df_names[3]`** (n= `r df_desc[[3]]$obsnbtot`) contains `r df_desc[[3]]$varnbtot` variables. Period covered is from `r df_desc[[3]]$yearsrange`, sampling are made mainly at the months of `r df_desc[[3]]$nbstatmt`, on `r df_desc[[3]]$nbstattot` different stations, with a mean of `r df_desc[[3]]$nbstatyr` per year.

### Coasthf

```{r}
#| label: coas_data

df_set<-cf_set
df_setvar<-cf_setvar %>%
  paste(collapse = ", ")
df_names<-names(df_set)
df_desc<-list()
for (dfi in 1:length(df_set)) {
  df<-df_set[[dfi]]
  bdd_base<-unique(df$bdd_base)
  df_name<-unique(df$bdd_table)
  obsnbtot <-count(df) %>%
    pull() %>% 
    formatC(., format="f", big.mark=",", digits=0)
  varnbtot <- ncol(df)
    summarise(across(sampling_date,
                     list(start=~year(min(.,na.rm=TRUE)),
                          end=~year(max(.,na.rm=TRUE))))) %>%
    unlist(., use.names=FALSE) %>%
    paste(collapse = " to ")
  nbstatmt <- df %>% 
    mutate(dfMonth=month.abb[month(sampling_date)]) %>%
    group_by(dfMonth) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    arrange(desc(nbstat)) %>% 
    mutate(cumprop = cumsum(nbstat)/sum(nbstat)) %>% 
    filter(cumprop<=0.6) %>%
    arrange(match(dfMonth, month.abb)) %>% 
    pull(dfMonth,unique(cumprop)) %>% 
    paste(collapse = ", ")
  nbstattot <- df %>% 
    summarise(n_distinct(station)) %>% 
    pull()
  nbstatyr <- df %>% 
      mutate(dfYear  = year(sampling_date)) %>%
    group_by(dfYear) %>% 
    summarise(nbstat=n_distinct(station)) %>%
    summarise(nbstat=round(mean(nbstat),0)) %>% 
    pull()
  
  df_desc[[dfi]]<-list(obsnbtot=obsnbtot,
                       varnbtot=varnbtot,
                       yearsrange=yearsrange,
                       nbstatmt=nbstatmt,
                       nbstattot=nbstattot,
                       nbstatyr=nbstatyr)
}

```

The COASTHF data set count `r length(df_set)` tables that has the common variables `r df_setvar`.

```{r}
#| include: true
bind_rows(df_desc, .id = "bdd_table")  %>%
  kable()
```

# Final actions and save

Rdata are saved in `rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   data : contains whatever

```{r}
#| label: finalsave_xsl
#| eval: false

wb <- copyWorkbook(loadWorkbook(binderin))
# copyworkbook to avoid any pb that can occur on the excel file
if (!("AllMeas" %in% names(wb))) {
  addWorksheet(wb=wb, sheetName = "AllMeas")}
writeData(wb, sheet = "AllMeas", x = data, 
          startCol = 1, startRow = 1,withFilter = FALSE)

saveWorkbook(wb,file=binderout, overwrite = TRUE)

```

```{r}
#| label: finalsave_rdata

# save.image(file = rdataout)
beepr::beep(2)

```

# References {.unnumbered}
